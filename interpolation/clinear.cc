//****************************************************************************************************
//подключаемые библиотеки
//****************************************************************************************************
#include "clinear.h"
#include "cstep.h"
#include <memory>

//****************************************************************************************************
//глобальные переменные
//****************************************************************************************************

//****************************************************************************************************
//константы
//****************************************************************************************************

//****************************************************************************************************
//макроопределения
//****************************************************************************************************

//****************************************************************************************************
//конструктор и деструктор
//****************************************************************************************************

//----------------------------------------------------------------------------------------------------
//конструктор
//----------------------------------------------------------------------------------------------------
CLinear::CLinear(void)
{
}

//----------------------------------------------------------------------------------------------------
//деструктор
//----------------------------------------------------------------------------------------------------
CLinear::~CLinear()
{
}
//****************************************************************************************************
//закрытые функции
//****************************************************************************************************

//****************************************************************************************************
//открытые функции
//****************************************************************************************************

//----------------------------------------------------------------------------------------------------
//выполнить интерполяцию
//----------------------------------------------------------------------------------------------------
bool CLinear::Execute(const std::vector<CGrPoint> &input,std::vector<CGrPoint> &output,long double step)
{
 size_t size=input.size();
 output.clear();
 std::vector<CGrPoint> empty;
 output.swap(empty);

 if (size<2) return(false);//невозможно использовать линейную интерполяцию
 if (step==0) return(false);//чёткий ноль использовать нельзя
 size_t min_amount=(input[size-1].X-input[0].X)/step+1;
 output.reserve(min_amount);

 CStep cStep(size-2,step,input);
 long double x;
 size_t point;

 bool first_step=true;
 //коэффициенты полинома
 long double k;
 long double b;
 while(1)
 {
  bool change_point=cStep.UpdatePoint();
  cStep.GetPos(x,point);
  if (change_point==true || first_step==true)//требуется пересчитать полином
  {
   first_step=false;

   long double x0=input[point].X;
   long double y0=input[point].Y;

   long double x1=input[point+1].X;
   long double y1=input[point+1].Y;

   k=(y1-y0)/(x1-x0);
   b=y0-k*x0;
  }
  long double y=k*x+b;
  output.push_back(CGrPoint(x,y));
  if (cStep.NextStep()==false) break;
 }
 return(true);
}
